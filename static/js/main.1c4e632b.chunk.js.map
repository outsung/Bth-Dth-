{"version":3,"sources":["App/style.ts","components/Loader.tsx","components/MirrorRoom/ThinFilmFresnelMap.js","components/MirrorRoom/Mirror.tsx","components/MirrorRoom/mirrorsData.ts","components/MirrorRoom/Mirrors.tsx","components/Title.tsx","components/MirrorRoom/style.ts","components/MirrorRoom/index.tsx","App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["styled","div","Loader","progress","useProgress","Html","center","style","color","ThinFilmFresnelMap","filmThickness","refractiveIndexFilm","refractiveIndexBase","size","this","_filmThickness","_refractiveIndexFilm","_refractiveIndexBase","_size","_data","Uint8Array","_updateData","THREE","call","generateMipmaps","needsUpdate","prototype","Object","create","get","set","value","updateSettings","_fresnelRefl","refractiveIndex1","refractiveIndex2","cos1","cos2","R","phi","sin1Sqr","refrRatio","x","y","sqrRefrRatio","Math","atan","sqrt","r_p","r_s","PI","xFit_1931","lambda","t1","t2","t3","exp","yFit_1931","zFit_1931","data","phi12","phi21","phi23","R12","T12","R23","R_bi","T_tot","R_star","R_bi_sqr","R_12_star","R_star_t_tot","refrRatioSqr","refrRatioSqrBase","i","cosThetaI","cosThetaT","cosThetaT2","pathDiff","pathDiff2PI","z","totX","totY","totZ","j","waveLen","deltaPhase","cosPhiX","cos","cosPhiY","v","wx","wy","wz","r","g","b","clamp","k","floor","Mirror","sideMaterial","reflectionMaterial","args","position","rotation","layers","ref","useRef","useFrame","current","material","defaultProps","undefined","mirrorsData","mirrors","Mirrors","envMap","thinFilmFresnel","useState","thinFilmFresnelMap","useResource","map","opacity","transparent","mirror","Title","content","props","group","useEffect","lookAt","Text","material-color","fontSize","equation","x1","y1","x2","y2","BaseBackground","useMatcapTexture","matcapTexture","name","matcap","side","TitleCopies","vertices","useMemo","vertex","MirrorRoom","camera","useThree","scrollRef","settings","renderTarget","renderTargetSettings","format","cubeCamera","gl","scene","update","useRenderTarget","mode","setMode","changed","setChanged","hiddenContent","visibleContent","scrollY","scroll","ev","deltaY","type","lerp","window","addEventListener","removeEventListener","attach","fallback","texture","display","intensity","App","concurrent","shadowMap","fov","Dark","White","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c4e632b.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport default styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\n","import React from 'react';\nimport { useProgress, Html } from '@react-three/drei';\n\nfunction Loader() {\n  const { progress } = useProgress();\n  return (\n    <Html center>\n      <span style={{ color: '#FFFFFF' }}>{progress} % loaded</span>\n    </Html>\n  );\n}\n\nexport default Loader;\n","/* eslint-disable */\nimport * as THREE from 'three';\n\n/**\n * @classdesc\n * ThinFilmFresnelMap is a lookup texture containing the reflection colour. The texture index value\n * is dot(normal, view). The texture values are stored in approximated gamma space (power 2.0), so\n * the sampled value needs to be multiplied with itself before use. The sampled value should replace\n * the fresnel factor in a PBR material.\n *\n * @property filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @property refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @property refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n *\n * @constructor\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n * @param size The width of the texture. Defaults to 64.\n *\n * @extends DataTexture\n *\n * @author David Lenaerts <http://www.derschmale.com>\n */\nfunction ThinFilmFresnelMap(filmThickness = 380.0, refractiveIndexFilm = 2, refractiveIndexBase = 3, size = 64) {\n  this._filmThickness = filmThickness || 380.0;\n  this._refractiveIndexFilm = refractiveIndexFilm || 2;\n  this._refractiveIndexBase = refractiveIndexBase || 3;\n  this._size = size || 64;\n  this._data = new Uint8Array(this._size * 4);\n\n  this._updateData();\n\n  THREE.DataTexture.call(this, this._data, this._size, 1, THREE.RGBAFormat, THREE.UnsignedByteType, THREE.UVMapping, THREE.RepeatWrapping, THREE.RepeatWrapping, THREE.LinearFilter, THREE.LinearMipMapLinearFilter);\n  this.generateMipmaps = true;\n  this.needsUpdate = true;\n}\n\nThinFilmFresnelMap.prototype = Object.create(THREE.DataTexture.prototype, {\n  filmThickness:\n    {\n      get: function() {\n        return this._filmThickness;\n      },\n      set: function(value) {\n        this._filmThickness = value;\n        this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase);\n      },\n    },\n  refractiveIndexFilm:\n    {\n      get: function() {\n        return this._refractiveIndexFilm;\n      },\n      set: function(value) {\n        this._refractiveIndexFilm = value;\n        this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase);\n      }\n    },\n  refractiveIndexBase:\n    {\n      get: function() {\n        return this._refractiveIndexBase;\n      },\n      set: function(value) {\n        this._refractiveIndexBase = value;\n        this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase);\n      }\n    }\n});\n\n/**\n * Regenerates the lookup texture given new data.\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\n */\nThinFilmFresnelMap.prototype.updateSettings = function(filmThickness, refractiveIndexFilm, refractiveIndexBase) {\n  this._filmThickness = filmThickness || 380;\n  this._refractiveIndexFilm = refractiveIndexFilm || 2;\n  this._refractiveIndexBase = refractiveIndexBase || 3;\n  this._updateData();\n};\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._fresnelRefl = function(refractiveIndex1, refractiveIndex2, cos1, cos2, R, phi) {\n  // r is amplitudinal, R is power\n  var sin1Sqr = 1.0 - cos1 * cos1;  // = sin^2(incident)\n  var refrRatio = refractiveIndex1 / refractiveIndex2;\n\n  if (refrRatio * refrRatio * sin1Sqr > 1.0) {\n    // total internal reflection\n    R.x = 1.0;\n    R.y = 1.0;\n\n    var sqrRefrRatio = refrRatio * refrRatio;\n    // it looks like glsl's atan ranges are different from those in JS?\n    phi.x = 2.0 * Math.atan(-sqrRefrRatio * Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1);\n    phi.y = 2.0 * Math.atan(-Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1);\n  } else {\n    var r_p = (refractiveIndex2 * cos1 - refractiveIndex1 * cos2) / (refractiveIndex2 * cos1 + refractiveIndex1 * cos2);\n    var r_s = (refractiveIndex1 * cos1 - refractiveIndex2 * cos2) / (refractiveIndex1 * cos1 + refractiveIndex2 * cos2);\n\n    phi.x = r_p < 0.0 ? Math.PI : 0.0;\n    phi.y = r_s < 0.0 ? Math.PI : 0.0;\n\n    R.x = r_p * r_p;\n    R.y = r_s * r_s;\n  }\n};\n\n/**\n * @private\n */\nThinFilmFresnelMap.prototype._updateData = function() {\n  var filmThickness = this._filmThickness;\n  var refractiveIndexFilm = this._refractiveIndexFilm;\n  var refractiveIndexBase = this._refractiveIndexBase;\n  var size = this._size;\n\n  // approximate CIE XYZ weighting functions from: http://jcgt.org/published/0002/02/01/paper.pdf\n  function xFit_1931(lambda) {\n    var t1 = (lambda - 442.0) * ((lambda < 442.0) ? 0.0624 : 0.0374);\n    var t2 = (lambda - 599.8) * ((lambda < 599.8) ? 0.0264 : 0.0323);\n    var t3 = (lambda - 501.1) * ((lambda < 501.1) ? 0.0490 : 0.0382);\n    return 0.362 * Math.exp(-0.5 * t1 * t1) + 1.056 * Math.exp(-0.5 * t2 * t2) - 0.065 * Math.exp(-0.5 * t3 * t3);\n  }\n\n  function yFit_1931(lambda) {\n    var t1 = (lambda - 568.8) * ((lambda < 568.8) ? 0.0213 : 0.0247);\n    var t2 = (lambda - 530.9) * ((lambda < 530.9) ? 0.0613 : 0.0322);\n    return 0.821 * Math.exp(-0.5 * t1 * t1) + 0.286 * Math.exp(-0.5 * t2 * t2);\n  }\n\n  function zFit_1931(lambda) {\n    var t1 = (lambda - 437.0) * ((lambda < 437.0) ? 0.0845 : 0.0278);\n    var t2 = (lambda - 459.0) * ((lambda < 459.0) ? 0.0385 : 0.0725);\n    return 1.217 * Math.exp(-0.5 * t1 * t1) + 0.681 * Math.exp(-0.5 * t2 * t2);\n  }\n\n  var data = this._data;\n  var phi12 = new THREE.Vector2();\n  var phi21 = new THREE.Vector2();\n  var phi23 = new THREE.Vector2();\n  var R12 = new THREE.Vector2();\n  var T12 = new THREE.Vector2();\n  var R23 = new THREE.Vector2();\n  var R_bi = new THREE.Vector2();\n  var T_tot = new THREE.Vector2();\n  var R_star = new THREE.Vector2();\n  var R_bi_sqr = new THREE.Vector2();\n  var R_12_star = new THREE.Vector2();\n  var R_star_t_tot = new THREE.Vector2();\n\n  var refrRatioSqr = 1.0 / (refractiveIndexFilm * refractiveIndexFilm);\n  var refrRatioSqrBase = (refractiveIndexFilm * refractiveIndexFilm) / (refractiveIndexBase * refractiveIndexBase);\n\n  // RGB is too limiting, so we use the entire spectral domain, but using limited samples (64) to\n  // create more pleasing bands\n  var numBands = 64;\n  var waveLenRange = 780 - 380; // the entire visible range\n\n  for (var i = 0; i < size; ++i) {\n    var cosThetaI = i / size;\n    var cosThetaT = Math.sqrt(1 - refrRatioSqr * (1.0 - cosThetaI * cosThetaI));\n    var cosThetaT2 = Math.sqrt(1 - refrRatioSqrBase * (1.0 - cosThetaT * cosThetaT));\n\n    // this is essentially the extra distance traveled by a ray if it bounds through the film\n    var pathDiff = 2.0 * refractiveIndexFilm * filmThickness * cosThetaT;\n    var pathDiff2PI = 2.0 * Math.PI * pathDiff;\n\n    this._fresnelRefl(1.0, refractiveIndexFilm, cosThetaI, cosThetaT, R12, phi12);\n    T12.x = 1.0 - R12.x;\n    T12.y = 1.0 - R12.y;\n    phi21.x = Math.PI - phi12.x;\n    phi21.y = Math.PI - phi12.y;\n\n    // this concerns the base layer\n    this._fresnelRefl(refractiveIndexFilm, refractiveIndexBase, cosThetaT, cosThetaT2, R23, phi23);\n    R_bi.x = Math.sqrt(R23.x * R12.x);\n    R_bi.y = Math.sqrt(R23.y * R12.y);\n    T_tot.x = Math.sqrt(T12.x * T12.x);\n    T_tot.y = Math.sqrt(T12.y * T12.y);\n    R_star.x = (T12.x * T12.x * R23.x) / (1.0 - R23.x * R12.x);\n    R_star.y = (T12.y * T12.y * R23.y) / (1.0 - R23.y * R12.y);\n    R_bi_sqr.x = R_bi.x * R_bi.x;\n    R_bi_sqr.y = R_bi.y * R_bi.y;\n    R_12_star.x = R12.x + R_star.x;\n    R_12_star.y = R12.y + R_star.y;\n    R_star_t_tot.x = R_star.x - T_tot.x;\n    R_star_t_tot.y = R_star.y - T_tot.y;\n    var x = 0, y = 0, z = 0;\n    var totX = 0, totY = 0, totZ = 0;\n\n    // TODO: we could also put the thickness in the look-up table, make it a 2D table\n    for (var j = 0; j < numBands; ++j) {\n      var waveLen = 380 + j / (numBands - 1) * waveLenRange;\n      var deltaPhase = pathDiff2PI / waveLen;\n\n      var cosPhiX = Math.cos(deltaPhase + phi23.x + phi21.x);\n      var cosPhiY = Math.cos(deltaPhase + phi23.y + phi21.y);\n      var valX = R_12_star.x + 2.0 * (R_bi.x * cosPhiX - R_bi_sqr.x) / (1.0 - 2 * R_bi.x * cosPhiX + R_bi_sqr.x) * R_star_t_tot.x;\n      var valY = R_12_star.y + 2.0 * (R_bi.y * cosPhiY - R_bi_sqr.y) / (1.0 - 2 * R_bi.y * cosPhiY + R_bi_sqr.y) * R_star_t_tot.y;\n      var v = .5 * (valX + valY);\n\n      var wx = xFit_1931(waveLen);\n      var wy = yFit_1931(waveLen);\n      var wz = zFit_1931(waveLen);\n\n      totX += wx;\n      totY += wy;\n      totZ += wz;\n\n      x += wx * v;\n      y += wy * v;\n      z += wz * v;\n    }\n\n    x /= totX;\n    y /= totY;\n    z /= totZ;\n\n    var r = 3.2406 * x - 1.5372 * y - 0.4986 * z;\n    var g = -0.9689 * x + 1.8758 * y + 0.0415 * z;\n    var b = 0.0557 * x - 0.2040 * y + 1.0570 * z;\n\n    r = THREE.Math.clamp(r, 0.0, 1.0);\n    g = THREE.Math.clamp(g, 0.0, 1.0);\n    b = THREE.Math.clamp(b, 0.0, 1.0);\n\n    // linear to gamma\n    r = Math.sqrt(r);\n    g = Math.sqrt(g);\n    b = Math.sqrt(b);\n\n    // CIE XYZ to linear rgb conversion matrix:\n    // 3.2406 -1.5372 -0.4986\n    // -0.9689  1.8758  0.0415\n    // 0.0557 -0.2040  1.0570\n\n    var k = i << 2;\n    data[k] = Math.floor(r * 0xff);\n    data[k + 1] = Math.floor(g * 0xff);\n    data[k + 2] = Math.floor(b * 0xff);\n    data[k + 3] = 0xff;\n  }\n\n  this.needsUpdate = true;\n};\n\nexport default ThinFilmFresnelMap;","import React, { useRef } from \"react\";\nimport { Mesh, Material, Euler, Vector3 } from \"three\";\nimport { useFrame } from \"react-three-fiber\";\n\nimport { Box } from \"@react-three/drei\";\n\ntype mirrorProps = {\n  sideMaterial: Material;\n  reflectionMaterial: Material;\n  args?: [\n    width?: number | undefined,\n    height?: number | undefined,\n    depth?: number | undefined,\n    widthSegments?: number | undefined,\n    heightSegments?: number | undefined,\n    depthSegments?: number | undefined\n  ];\n  rotation?:\n    | Euler\n    | [x: number, y: number, z: number, order?: string | undefined];\n  position?: Vector3 | [x: number, y: number, z: number];\n  layers?: [channel: number];\n};\n\nfunction Mirror({\n  sideMaterial,\n  reflectionMaterial,\n  args,\n  position,\n  rotation,\n  layers,\n}: mirrorProps) {\n  const ref = useRef({} as Mesh);\n\n  useFrame(() => {\n    ref.current.rotation.x += 0.00008;\n    ref.current.rotation.y += 0.0008;\n  });\n\n  return (\n    <Box\n      layers={layers}\n      ref={ref}\n      args={args}\n      position={position}\n      rotation={rotation}\n      material={[\n        sideMaterial,\n        sideMaterial,\n        sideMaterial,\n        sideMaterial,\n        reflectionMaterial,\n        reflectionMaterial,\n      ]}\n    />\n  );\n}\nMirror.defaultProps = {\n  args: undefined,\n  position: undefined,\n  rotation: undefined,\n  layers: [0],\n};\n\nexport default Mirror;\n","\nconst mirrorsData = {\n  mirrors: [\n    {\n      args: [2.8, 2.9, 0.05],\n      position: [3.1, -2.1, -7.9],\n      rotation: [1.2, -1.6, 1],\n    },\n    {\n      args: [2, 3.3, 0.05],\n      position: [-2.3, 1.5, -6.5],\n      rotation: [3, -0.2, 0.7],\n    },\n    {\n      args: [2.8, 2.9, 0.05],\n      position: [1.2, 2.8, -6.4],\n      rotation: [-1.3, 2.8, -0.1],\n    },\n    {\n      args: [2.2, 1.3, 0.05],\n      position: [4.5, 0.9, -5.8],\n      rotation: [-2.3, 0.6, -0.3],\n    },\n    {\n      args: [1.7, 2.6, 0.05],\n      position: [-2.8, -3.0, -5.4],\n      rotation: [-1.4, 3.0, 2.5],\n    },\n    {\n      args: [1.1, 1.8, 0.05],\n      position: [-0.0, -1.3, -2.4],\n      rotation: [3, 1, 1],\n    },\n    {\n      args: [2.2, 2.6, 0.05],\n      position: [-4.1, -0.3, -2.4],\n      rotation: [1.4, 1.8, -2.2],\n    },\n    {\n      args: [2.0, 1.5, 0.05],\n      position: [6.5, -2.6, -6.2],\n      rotation: [1.1, 0.5, 0.4],\n    },\n    {\n      args: [1, 1, 0.05],\n      position: [-3, 2.5, -1.5],\n      rotation: [4, -1, 5],\n    },\n    {\n      args: [1.3, 1.5, 0.05],\n      position: [3.6, -4.1, -4.3],\n      rotation: [-0.7, 1.4, 2.0],\n    },\n    {\n      args: [5.1, 4.4, 0.05],\n      position: [0.6, 7.0, -8.3],\n      rotation: [-0.0, 1.9, 0.5],\n    },\n  ],\n};\n\nexport default mirrorsData;","import React, { useState } from \"react\";\nimport { Texture, Material } from \"three\";\nimport { useResource } from \"react-three-fiber\";\n\nimport ThinFilmFresnelMap from \"./ThinFilmFresnelMap\";\n\nimport Mirror from \"./Mirror\";\n\nimport mirrorsData from \"./mirrorsData\";\n\ntype mirrorsProps = {\n  envMap: Texture;\n  layers: [channel: number];\n  thinFilmFresnel: boolean;\n};\n\nfunction Mirrors({ envMap, layers, thinFilmFresnel }: mirrorsProps) {\n  const [thinFilmFresnelMap] = useState<any>(new ThinFilmFresnelMap());\n  const sideMaterial = useResource<Material>();\n  const reflectionMaterial = useResource<Material>();\n\n  return (\n    <group>\n      <meshLambertMaterial\n        ref={sideMaterial}\n        map={thinFilmFresnel ? thinFilmFresnelMap : undefined}\n        color=\"#AAAAAA\"\n        opacity={0.7}\n        transparent\n      />\n      <meshLambertMaterial\n        ref={reflectionMaterial}\n        // map={thinFilmFresnel ? thinFilmFresnelMap : undefined}\n        envMap={envMap}\n        color=\"#FFFFFF\"\n        opacity={0.3}\n        transparent\n      />\n\n      {mirrorsData.mirrors.map((mirror, i) => (\n        <Mirror\n          key={i}\n          layers={layers}\n          args={[mirror.args[0], mirror.args[1], mirror.args[2]]}\n          position={[\n            mirror.position[0],\n            mirror.position[1],\n            mirror.position[2],\n          ]}\n          rotation={[\n            mirror.rotation[0],\n            mirror.rotation[1],\n            mirror.rotation[2],\n          ]}\n          sideMaterial={sideMaterial.current}\n          reflectionMaterial={reflectionMaterial.current}\n        />\n      ))}\n    </group>\n  );\n}\n\nexport default Mirrors;\n","import React, { useEffect, useRef } from \"react\";\nimport { Mesh, Vector3, Group } from \"three\";\nimport { Object3DNode } from \"react-three-fiber\";\nimport { Text } from \"@react-three/drei\";\n\n// import useLayers from '../utils/useLayers';\n\ninterface titleProps extends Object3DNode<Group, typeof Group> {\n  position: Vector3 | [x: number, y: number, z: number];\n  content: string;\n  layers: [channel: number];\n  color?: string;\n}\n\nfunction Title({ layers, position, content, color, ...props }: titleProps) {\n  const group = useRef({} as Mesh);\n  useEffect(() => {\n    group.current.lookAt(0, 0, 0);\n  }, []);\n\n  return (\n    <group {...props} position={position} ref={group}>\n      <Text layers={layers} material-color={color} fontSize={5}>\n        {content}\n      </Text>\n    </group>\n  );\n}\nTitle.defaultProps = { color: \"#FFFFFF\" };\n\nexport default Title;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  position: absolute;\n\n  background-color: black;\n\n  width: 100vw;\n  height: 100vh;\n`;\n","import React, { Suspense, useRef, useMemo, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport { useMatcapTexture, Octahedron, HTML } from \"@react-three/drei\";\n\nimport Loader from \"../Loader\";\n// import Slerp from \"../Slerp\";\n\nimport Mirrors from \"./Mirrors\";\nimport Title from \"../Title\";\n\nimport Shade from \"./style\";\n\nfunction equation(x: number, x1: number, y1: number, x2: number, y2: number) {\n  return ((y2 - y1) / (x2 - x1)) * (x - x1) + y1;\n}\n\nfunction BaseBackground() {\n  const [matcapTexture] = useMatcapTexture(\"C8D1DC_575B62_818892_6E747B\");\n  // console.log(matcapTexture instanceof Texture);\n\n  return (\n    <Octahedron\n      layers={[11]}\n      name=\"background\"\n      args={[20, 4]}\n      position={[0, 0, -5]}\n    >\n      {matcapTexture instanceof THREE.Texture ? (\n        <meshMatcapMaterial\n          matcap={matcapTexture}\n          side={THREE.BackSide}\n          transparent\n          opacity={0.3}\n          color=\"#FFFFFF\"\n        />\n      ) : (\n        <></>\n      )}\n    </Octahedron>\n  );\n}\n\nfunction TitleCopies({\n  layers,\n  content,\n  color,\n}: {\n  layers: [channel: number];\n  content: string;\n  color: string;\n}) {\n  const vertices = useMemo(() => {\n    const y = new THREE.DodecahedronGeometry(25);\n    // const y = new THREE.IcosahedronGeometry(10);\n    return y.vertices;\n  }, []);\n\n  return (\n    <group>\n      {vertices.map((vertex, i) => (\n        <Title\n          key={i}\n          color={color}\n          layers={layers}\n          position={vertex}\n          content={content}\n        />\n      ))}\n    </group>\n  );\n}\n\nfunction useRenderTarget(settings = {}) {\n  const renderTarget = useMemo(() => {\n    const renderTargetSettings = {\n      format: THREE.RGBAFormat,\n      generateMipmaps: true,\n    };\n\n    return new THREE.WebGLCubeRenderTarget(1024, {\n      ...renderTargetSettings,\n      ...settings,\n    });\n  }, [settings]);\n\n  const cubeCamera = useRef({} as THREE.CubeCamera);\n\n  useFrame(({ gl, scene }) => {\n    if (!cubeCamera.current.update) return;\n    cubeCamera.current.update(gl, scene);\n  });\n\n  return { cubeCamera, renderTarget };\n}\n\ninterface mirrorRoomProps {\n  content: { Dark: string; White: string };\n}\n\nfunction MirrorRoom({ content }: mirrorRoomProps) {\n  const { camera } = useThree();\n  const scrollRef = useRef({} as THREE.Group);\n  const { cubeCamera, renderTarget } = useRenderTarget();\n\n  const [mode, setMode] = useState<\"Dark\" | \"White\">(\"White\");\n  const [changed, setChanged] = useState(false);\n\n  const hiddenContent = content[mode === \"Dark\" ? \"White\" : \"Dark\"];\n  const visibleContent = content[mode];\n\n  const scrollY = useRef(0);\n  // camera.position.z;\n\n  const scroll = useMemo(\n    () =>\n      function (this: Window, ev: WheelEvent) {\n        scrollY.current += ev.deltaY * 0.01;\n\n        let type = 0;\n        if (scrollY.current < 0) {\n          scrollY.current = 0;\n          type = 0;\n        } else if (scrollY.current < 40) {\n          type = 1;\n        } else if (scrollY.current < 45) {\n          type = 2;\n        } else if (scrollY.current < 50) {\n          type = 3;\n        } else if (scrollY.current < 90) {\n          type = 4;\n        } else {\n          type = 5;\n        }\n\n        // console.log(\n        //   `type : ${type},\\nscrollY : ${scrollY.current},\\nposition.z : ${camera.position.z}`\n        // );\n\n        const { x, y } = camera.position;\n\n        if (type === 0) {\n          camera.position.lerp(new THREE.Vector3(x, y, 4), 1);\n        } else if (type === 1) {\n          setChanged(false);\n          camera.position.lerp(\n            new THREE.Vector3(x, y, equation(scrollY.current, 0, 4, 40, -9.9)),\n            1\n          );\n        } else if (type === 2) {\n          setChanged(true);\n          setMode(\"White\");\n          camera.position.lerp(new THREE.Vector3(x, y, -9.9), 1);\n        } else if (type === 3) {\n          setChanged(true);\n          setMode(\"Dark\");\n          camera.position.lerp(new THREE.Vector3(x, y, -9.9), 1);\n        } else if (type === 4) {\n          setChanged(false);\n          camera.position.lerp(\n            new THREE.Vector3(x, y, equation(scrollY.current, 50, -9.9, 90, 4)),\n            1\n          );\n        } else if (type === 5) {\n          camera.position.lerp(new THREE.Vector3(x, y, 4), 1);\n        }\n      },\n    [camera]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"wheel\", scroll);\n    return () => {\n      window.removeEventListener(\"wheel\", scroll);\n    };\n  }, [scroll]);\n\n  return (\n    <>\n      <color\n        attach=\"background\"\n        args={mode === \"Dark\" ? [0, 0, 0] : [1, 1, 1]}\n      />\n      <Suspense fallback={<Loader />}>\n        {/* <Slerp> */}\n        {/* hidden */}\n        <BaseBackground />\n        <TitleCopies\n          color={mode === \"Dark\" ? \"#FFFFFF\" : \"#000000\"}\n          layers={[11]}\n          content={hiddenContent}\n        />\n        <cubeCamera\n          layers={[11]}\n          ref={cubeCamera}\n          args={[0.1, 100, renderTarget]}\n          position={[0, 0, 5]}\n        />\n        {/* visible */}\n        <Mirrors\n          layers={[0]}\n          envMap={renderTarget.texture}\n          thinFilmFresnel={mode === \"Dark\"}\n        />\n        <group ref={scrollRef}>\n          <HTML\n            position={[-8.5, 5, -17.3]}\n            style={{ display: changed ? \"block\" : \"none\" }}\n          >\n            <Shade />\n          </HTML>\n          <Title\n            color={mode === \"Dark\" ? \"#FFFFFF\" : \"#000000\"}\n            layers={[0]}\n            position={mode === \"Dark\" ? [0, 0, -10] : [0.3, -0.6, -10]}\n            content={visibleContent}\n          />\n        </group>\n        {/* </Slerp> */}\n      </Suspense>\n      <ambientLight intensity={0.7} />\n    </>\n  );\n}\n\nexport default MirrorRoom;\n","import React from \"react\";\nimport { Canvas } from \"react-three-fiber\";\n\nimport Container from \"./style\";\n\nimport MirrorRoom from \"../components/MirrorRoom\";\n// import Controls from \"../utils/Controls\";\n\n// import Introduce from \"../components/Introduce\";\n// import Footer from \"../components/Footer\";\n// import TodayUsers from \"../components/TodayUsers\";\n\nexport default function App() {\n  return (\n    <>\n      <Container>\n        <Canvas\n          concurrent\n          shadowMap\n          camera={{ position: [0, 0.1, 4], fov: 70 }}\n        >\n          <MirrorRoom content={{ Dark: \"Death\", White: \"Werther\" }} />\n\n          {/* dev */}\n          {/* <Controls /> */}\n          {/* <gridHelper /> */}\n        </Canvas>\n      </Container>\n      {/* <Footer /> */}\n    </>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}